syntax = "proto3";

package trading;
option go_package = "BridgeApp/internal/grpc/proto;trading";
option csharp_namespace = "Trading.Proto";

// Unified logging
message LogEvent {
  int64 timestamp_ns = 1;
  string source = 2;        // bridge|nt|mt5
  string level = 3;         // TRACE|DEBUG|INFO|WARN|ERROR
  string component = 4;     // queue|stream|trade_exec|close_sync|...
  string message = 5;
  string base_id = 6;
  string trade_id = 7;
  string nt_order_id = 8;
  uint64 mt5_ticket = 9;
  int32 queue_size = 10;
  int32 net_position = 11;
  double hedge_size = 12;
  string error_code = 13;
  string stack = 14;
  map<string,string> tags = 15;
  string schema_version = 16; // added 2025-08 for enrichment tracking
  string correlation_id = 17; // trace/log correlation across systems
}

message LogAck {
  uint32 accepted = 1;
  uint32 dropped = 2;
}

// Core trade message
message Trade {
  string id = 1;
  string base_id = 2;
  int64 timestamp = 3;
  string action = 4;              // "buy", "sell", "CLOSE_HEDGE", etc.
  double quantity = 5;
  double price = 6;
  int32 total_quantity = 7;
  int32 contract_num = 8;
  string order_type = 9;          // "ENTRY", "TP", "SL", "NT_CLOSE"
  int32 measurement_pips = 10;
  double raw_measurement = 11;
  string instrument = 12;
  string account_name = 13;

  // Enhanced NT Performance Data
  double nt_balance = 14;
  double nt_daily_pnl = 15;
  string nt_trade_result = 16;    // "win", "loss", "pending"
  int32 nt_session_trades = 17;
  uint64 mt5_ticket = 18;         // MT5 position ticket number for CLOSE_HEDGE targeting
  // Elastic sizing hint: NT points that correspond to $1000 loss for 1 contract on NT
  double nt_points_per_1k_loss = 19; // added 2025-08

  // Optional event enrichment so EA can branch on elastic/trailing without synthetic trades
  string event_type = 20;                // e.g., "elastic_hedge_update"
  double elastic_current_profit = 21;    // forwarded for elastic events
  int32 elastic_profit_level = 22;       // forwarded for elastic events

  // Quantower identifiers (optional during transition)
  string qt_trade_id = 23;        // Quantower Trade.Id (authoritative unique identifier)
  string qt_position_id = 24;     // Quantower Position.Id (aggregate exposure grouping)
  string strategy_tag = 25;       // Quantower strategy/portfolio tag for hedging context
  string origin_platform = 26;    // source platform identifier (e.g., "quantower", "mt5")
}

// Hedge closure notification
message HedgeCloseNotification {
  string event_type = 1;
  string base_id = 2;
  string nt_instrument_symbol = 3;
  string nt_account_name = 4;
  double closed_hedge_quantity = 5;
  string closed_hedge_action = 6;
  string timestamp = 7;
  string closure_reason = 8;
  uint64 mt5_ticket = 9;  // MT5 position ticket number
}

// Elastic hedge update
message ElasticHedgeUpdate {
  string event_type = 1;
  string action = 2;
  string base_id = 3;
  double current_profit = 4;
  int32 profit_level = 5;
  string timestamp = 6;
  uint64 mt5_ticket = 7;  // MT5 position ticket number
}

// Trailing stop update
message TrailingStopUpdate {
  string event_type = 1;
  string base_id = 2;
  double new_stop_price = 3;
  string trailing_type = 4;
  double current_price = 5;
  string timestamp = 6;
  uint64 mt5_ticket = 7;  // MT5 position ticket number
}

// MT5 trade result
message MT5TradeResult {
  string status = 1;
  uint64 ticket = 2;
  double volume = 3;
  bool is_close = 4;
  string id = 5;
}

// Health check request/response
message HealthRequest {
  string source = 1;  // "hedgebot", "addon", etc.
  int32 open_positions = 2;  // Optional for hedgebot
}

message HealthResponse {
  string status = 1;
  int32 queue_size = 2;
  int32 net_position = 3;
  double hedge_size = 4;
}

// Generic response
message GenericResponse {
  string status = 1;
  string message = 2;
  map<string, string> metadata = 3;
}

// Settings request/response for addon
message SettingsRequest {
  string setting_name = 1;
}

message SettingsResponse {
  string setting_name = 1;
  string setting_value = 2;
  bool success = 3;
}

// System heartbeat
message HeartbeatRequest {
  string component = 1;
  string status = 2;
  string version = 3;
  int64 timestamp = 4;
}

message HeartbeatResponse {
  string status = 1;
  string message = 2;
}

// Trading service for main communication
service TradingService {
  // Trade submission from NinjaTrader
  rpc SubmitTrade(Trade) returns (GenericResponse);
  
  // Trade polling for MT5 (streaming)
  rpc GetTrades(stream HealthRequest) returns (stream Trade);
  
  // Trade result from MT5
  rpc SubmitTradeResult(MT5TradeResult) returns (GenericResponse);
  
  // Hedge closure notifications
  rpc NotifyHedgeClose(HedgeCloseNotification) returns (GenericResponse);
  
  // Elastic hedge updates
  rpc SubmitElasticUpdate(ElasticHedgeUpdate) returns (GenericResponse);
  
  // Trailing stop updates
  rpc SubmitTrailingUpdate(TrailingStopUpdate) returns (GenericResponse);
  
  // Health check
  rpc HealthCheck(HealthRequest) returns (HealthResponse);
  
  // Settings API
  rpc GetSettings(SettingsRequest) returns (SettingsResponse);
  
  // System heartbeat
  rpc SystemHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
  
  // NT close hedge request
  rpc NTCloseHedge(HedgeCloseNotification) returns (GenericResponse);
}

// Real-time streaming service
service StreamingService {
  // Bidirectional streaming for real-time updates
  rpc TradingStream(stream Trade) returns (stream Trade);
  
  // Status updates stream
  rpc StatusStream(stream HealthRequest) returns (stream HealthResponse);
  
  // Elastic hedge updates stream
  rpc ElasticUpdatesStream(stream ElasticHedgeUpdate) returns (stream GenericResponse);
  
  // Trailing stop updates stream
  rpc TrailingUpdatesStream(stream TrailingStopUpdate) returns (stream GenericResponse);
}

// Logging service (initially unary; can evolve to streaming later)
service LoggingService {
  rpc Log(LogEvent) returns (LogAck);
}
